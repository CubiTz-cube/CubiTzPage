---
interface Props {
}

const {  } = Astro.props;
---
<div class="container">
    <div class="start start-1"></div>
    <div class="start start-2"></div>
    <div class="start start-3"></div>
</div>

<script>
    const COLORS = ['#fff2','#fff4','#fff7','#fffc'];
   function generateStartLayer(size:string,duration:string,amount:number,selector:string) {
    const layer = [];
    const totalStart = amount
    for (let i = 0; i < totalStart; i++) {
        const color = COLORS[Math.floor(Math.random() * COLORS.length)];
        const x = Math.floor(Math.random() * 100);
        const y = Math.floor(Math.random() * 100);
        const shadow = `${x}vw ${y}vh 0 ${color}, ${x}vw ${y+100}vh 0 ${color}`;
        layer.push(shadow);
    }
    const contairner = document.querySelector(selector) as HTMLElement;
    contairner?.style.setProperty('--start-layer', layer.join(','));
    contairner?.style.setProperty('--size', size);
    contairner?.style.setProperty('--duration', duration);
}
    generateStartLayer('1px','25s',200,'.start-1');
    generateStartLayer('2px','35s',200,'.start-2');
    generateStartLayer('4px','45s',200,'.start-3');
</script>

<style>
.container{
    z-index: -5;
    position: fixed;
    inset: 0;
    overflow: hidden;
    padding: 0;
    margin: 0;
}
.start{
    width: var(--size);
    height: var(--size);
    background: white;
    box-shadow: var(--start-layer);
    position: absolute;
    opacity: 75%;
    animation: moveStart var(--duration, 20s) linear infinite;
}

@keyframes moveStart {
    from {
        transform: translateY(0);
    }
    to {
        transform: translateY(-100vh);
    }
}
</style>