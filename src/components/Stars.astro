---
interface Props {
    amount: number;
}

const { amount } = Astro.props;
const circles = Array(amount).fill(0);
---
<ul class="circles">
    {circles.map(() => (
        <li></li>
    ))}
</ul>

<script>
    const circles = document.querySelectorAll('.circles li');
    const circlesContainer = document.querySelector('.circles')  as HTMLElement;

    circles.forEach((circle) => {
        const htmlCircle = circle as HTMLElement;
        const top = Math.random() * circlesContainer.clientHeight;
        const left = Math.random() * circlesContainer.clientWidth;
        const animationDuration = Math.random() * 4 + 1;
        const scale = Math.random() * 10 + 5;

        htmlCircle.style.top = `${top-scale}px`;
        htmlCircle.style.left = `${left-scale}px`;
        htmlCircle.style.animationDuration = `${animationDuration}s`;
        htmlCircle.style.width = `${scale}px`;
        htmlCircle.style.height = `${scale}px`;

        circle.addEventListener('animationiteration', () => {
            const newTop = Math.random() * circlesContainer.clientHeight;
            const newLeft = Math.random() * circlesContainer.clientWidth;
            htmlCircle.style.top = `${newTop-scale}px`;
            htmlCircle.style.left = `${newLeft-scale}px`;
        });
    });
</script>

<style>
.circles{
    z-index: -5;
    position: absolute;
    width: 100%;
    height: 100%;
    padding: 0;
    overflow: hidden;
}

.circles li {
    z-index: -1;
    position: absolute;
    display: block;
    list-style: none;
    width: 20px;
    height: 20px;
    background: rgb(255, 255, 255, 0.5);
    animation: animate 1s ease-in-out infinite;
    animation-delay: 200ms;
}

@keyframes animate {
    0% {
        opacity: 0;
        transform: scale(1.2);
        transform: rotate(45deg);
    }
    50% {
        opacity: 1;
        transform: scale(1);
        transform: rotate(45deg);
    }
    100% {
        opacity: 0;
        transform: scale(1.2);
        transform: rotate(45deg);
    }
}
</style>